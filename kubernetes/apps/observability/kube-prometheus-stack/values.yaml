crds:
  enabled: false
cleanPrometheusOperatorObjectNames: true
alertmanager:
  # if you never see alertmanager come up, the ExternalSecret is probably incorrect. Run `kubectl describe alertmanager -n observability kube-prometheus-stack` to check what's wrong
  enabled: true
  ingress:
    enabled: true
    ingressClassName: internal
    hosts:
      - alertmanager.tholinka.dev

  alertmanagerSpec:
    useExistingSecret: true
    configSecret: alertmanager-secret
    forceEnableClusterMode: true
    storageClassName:
      volumeClaimTemplate:
        spec:
          storageClassName: longhorn-replicated
          resources:
            requests:
              storage: 1Gi

prometheusOperator:
  logLeveL: debug

prometheus:
  serviceMonitor:
    # fix for https://github.com/prometheus-community/helm-charts/issues/4221
    relabelings:
      - action: replace
        targetLabel: cluster
        replacement: tholinka.dev
  ingress:
    enabled: true
    ingressClassName: internal
    annotations:
      cert-manager.io/cluster-issuer: le-prod
    hosts:
      - prometheus.tholinka.dev

  prometheusSpec:
    # we want to pick up all rules, services monitors, pod monitors, etc
    ruleSelectorNilUsesHelmValues: false
    ruleSelector: {}
    serviceMonitorSelectorNilUsesHelmValues: false
    serviceMonitorSelector: {}
    podMonitorSelectorNilUsesHelmValues: false
    podMonitorSelector: {}
    probeSelectorNilUsesHelmValues: false
    probeSelector: {}
    scrapeConfigSelectorNilUsesHelmValues: false
    scrapeConfigSelector: {}
    walCompression: true
    retentionSize: 70GB
    resources:
      requests:
        cpu: 100m
      limits:
        memory: 1500Mi
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: longhorn-large
          resources:
            requests:
              storage: 75Gi

grafana:
  # we don't actually need this, because we enable ALL service monitors in the prometheusSpec, but adding so I don't forget if that changes :)
  serviceMonitor:
    labels:
      release: kube-prometheus-stack
  storageSpec:
    volumeClaimTemplate:
      spec:
        storageClassName: longhorn-large
        resources:
          requests:
            storage: 5Gi
  ingress:
    enabled: true
    ingressClassName: internal
    hosts:
      - grafana.tholinka.dev
  sidecar:
    datasources:
      defaultDatasourceEnabled: true
  additionalDataSources:
    - name: Loki
      type: loki
      url: http://loki-gateway.monitoring.svc.cluster.local

# k3s specific setup: https://github.com/k3s-io/k3s/issues/3619#issuecomment-878501106, https://github.com/k3s-io/k3s/issues/3619#issuecomment-973188304
# bunch of minor fixes here: https://github.com/k3s-io/k3s/issues/3619#issuecomment-1991598167
kubeApiServer:
  serviceMonitor:
    metricRelabelings:
      # k3s specific
      - action: drop
        regex: (apiserver_request_duration_seconds_bucket|apiserver_request_body_size_bytes_bucket|apiserver_response_sizes_bucket|apiserver_watch_events_sizes_bucket|apiserver_request_sli_duration_seconds_bucket)
        sourceLabels: [__name__]
      - action: drop
        regex: 'etcd_request_duration_seconds_bucket'
        sourceLabels: [__name__]
      - action: drop
        regex: (scheduler_plugin_execution_duration_seconds_bucket)
        sourceLabels: [__name__]
      - action: drop
        regex: (workqueue_work_duration_seconds_bucket)
        sourceLabels: [__name__]
      # Drop high cardinality labels
      - action: drop
        sourceLabels: ['__name__']
        regex: (apiserver|etcd|rest_client)_request(|_sli|_slo)_duration_seconds_bucket
      - action: drop
        sourceLabels: ['__name__']
        regex: (apiserver_response_sizes_bucket|apiserver_watch_events_sizes_bucket)

kubelet:
  serviceMonitor:
    cAdvisorRelabelings:
      # k3s specific
      - action: replace
        sourceLabels: [__metrics_path__]
        targetLabel: metrics_path
      - action: replace
        targetLabel: instance
        sourceLabels:
          - 'node'
    relabelings:
      # k3s specific
      - action: replace
        sourceLabels: [__metrics_path__]
        targetLabel: metrics_path
    metricRelabelings:
      # k3s specific
      - action: drop
        regex: (apiserver_request_duration_seconds_bucket|apiserver_request_body_size_bytes_bucket|apiserver_response_sizes_bucket|apiserver_watch_events_sizes_bucket|apiserver_request_sli_duration_seconds_bucket)
        sourceLabels: [__name__]
      - action: drop
        regex: 'etcd_request_duration_seconds_bucket'
        sourceLabels: [__name__]
      - action: drop
        regex: (scheduler_plugin_execution_duration_seconds_bucket)
        sourceLabels: [__name__]
      - action: drop
        regex: (workqueue_work_duration_seconds_bucket)
        sourceLabels: [__name__]
      # Drop high cardinality labels
      - action: labeldrop
        regex: (uid)
      - action: labeldrop
        regex: (id|name)
      - action: drop
        sourceLabels: ['__name__']
        regex: (rest_client_request_duration_seconds_bucket|rest_client_request_duration_seconds_sum|rest_client_request_duration_seconds_count)

kubeControllerManager:
  # Add all Control Plane IPs
  endpoints: &endpoints
    - 192.168.1.2
    #- 192.168.1.25
    #- 192.168.1.26
  service:
    enabled: true
    port: 10257
    targetPort: 10257
  serviceMonitor:
    https: true
    insecureSkipVerify: true
    metricRelabelings:
      # k3s specific
      - action: drop
        regex: (apiserver_request_duration_seconds_bucket|apiserver_request_body_size_bytes_bucket|apiserver_response_sizes_bucket|apiserver_watch_events_sizes_bucket|apiserver_request_sli_duration_seconds_bucket)
        sourceLabels: [__name__]
      - action: drop
        regex: 'etcd_request_duration_seconds_bucket'
        sourceLabels: [__name__]
      - action: drop
        regex: (scheduler_plugin_execution_duration_seconds_bucket)
        sourceLabels: [__name__]
      - action: drop
        regex: (workqueue_work_duration_seconds_bucket)
        sourceLabels: [__name__]

kubeEtcd:
  # Add all Control Plane IPs
  endpoints: *endpoints
  service:
    enabled: true
    port: 2381
    targetPort: 2381
  serviceMonitor:
    metricRelabelings:
      # k3s specific
      - action: drop
        regex: (apiserver_request_duration_seconds_bucket|apiserver_request_body_size_bytes_bucket|apiserver_response_sizes_bucket|apiserver_watch_events_sizes_bucket|apiserver_request_sli_duration_seconds_bucket)
        sourceLabels: [__name__]
      - action: drop
        regex: 'etcd_request_duration_seconds_bucket'
        sourceLabels: [__name__]
      - action: drop
        regex: (scheduler_plugin_execution_duration_seconds_bucket)
        sourceLabels: [__name__]
      - action: drop
        regex: (workqueue_work_duration_seconds_bucket)
        sourceLabels: [__name__]

kubeScheduler:
  # Add all Control Plane IPs
  endpoints: *endpoints
  service:
    enabled: true
    port: 10259
    targetPort: 10259
  serviceMonitor:
    https: true
    insecureSkipVerify: true
    metricRelabelings:
      # k3s specific
      - action: drop
        regex: (apiserver_request_duration_seconds_bucket|apiserver_request_body_size_bytes_bucket|apiserver_response_sizes_bucket|apiserver_watch_events_sizes_bucket|apiserver_request_sli_duration_seconds_bucket)
        sourceLabels: [__name__]
      - action: drop
        regex: 'etcd_request_duration_seconds_bucket'
        sourceLabels: [__name__]
      - action: drop
        regex: (scheduler_plugin_execution_duration_seconds_bucket)
        sourceLabels: [__name__]
      - action: drop
        regex: (workqueue_work_duration_seconds_bucket)
        sourceLabels: [__name__]

kubeProxy:
  # Add all Control Plane IPs
  endpoints: *endpoints
  service:
    enabled: true
    port: 10249
    targetPort: 10249
    selector:
      k8s-app: kube-proxy
  serviceMonitor:
    metricRelabelings:
      # k3s specific
      - action: drop
        regex: (apiserver_request_duration_seconds_bucket|apiserver_request_body_size_bytes_bucket|apiserver_response_sizes_bucket|apiserver_watch_events_sizes_bucket|apiserver_request_sli_duration_seconds_bucket)
        sourceLabels: [__name__]
      - action: drop
        regex: 'etcd_request_duration_seconds_bucket'
        sourceLabels: [__name__]
      - action: drop
        regex: (scheduler_plugin_execution_duration_seconds_bucket)
        sourceLabels: [__name__]
      - action: drop
        regex: (workqueue_work_duration_seconds_bucket)
        sourceLabels: [__name__]

coreDns:
  serviceMonitor:
    metricRelabelings:
      # k3s specific
      - action: drop
        regex: (apiserver_request_duration_seconds_bucket|apiserver_request_body_size_bytes_bucket|apiserver_response_sizes_bucket|apiserver_watch_events_sizes_bucket|apiserver_request_sli_duration_seconds_bucket)
        sourceLabels: [__name__]
      - action: drop
        regex: 'etcd_request_duration_seconds_bucket'
        sourceLabels: [__name__]
      - action: drop
        regex: (scheduler_plugin_execution_duration_seconds_bucket)
        sourceLabels: [__name__]
      - action: drop
        regex: (workqueue_work_duration_seconds_bucket)
        sourceLabels: [__name__]

kubeDns:
  serviceMonitor:
    metricRelabelings:
      # k3s specific
      - action: drop
        regex: (apiserver_request_duration_seconds_bucket|apiserver_request_body_size_bytes_bucket|apiserver_response_sizes_bucket|apiserver_watch_events_sizes_bucket|apiserver_request_sli_duration_seconds_bucket)
        sourceLabels: [__name__]
      - action: drop
        regex: 'etcd_request_duration_seconds_bucket'
        sourceLabels: [__name__]
      - action: drop
        regex: (scheduler_plugin_execution_duration_seconds_bucket)
        sourceLabels: [__name__]
      - action: drop
        regex: (workqueue_work_duration_seconds_bucket)
        sourceLabels: [__name__]

kubeStateMetrics:
  enabled: true

kube-state-metrics:
  fullnameOverride: kube-state-metrics
  metricLabelsAllowlist:
    - pods=[*]
    - deployments=[*]
    - persistentvolumeclaims=[*]
  prometheus:
    monitor:
      enabled: true
      relabelings:
        # k3s specific
        - action: replace
          targetLabel: 'instance'
          sourceLabels:
            - '__meta_kubernetes_pod_node_name'

nodeExporter:
  enabled: true

prometheus-node-exporter:
  fullnameOverride: node-exporter
  prometheus:
    monitor:
      enabled: true
      relabelings:
        # k3s specific
        - action: replace
          targetLabel: 'instance'
          sourceLabels:
            - '__meta_kubernetes_pod_node_name'
